<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"  
    xmlns:task="http://www.springframework.org/schema/task"
    xsi:schemaLocation="http://www.springframework.org/schema/beans    
					    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
					    http://www.springframework.org/schema/context    
					    http://www.springframework.org/schema/context/spring-context-3.0.xsd    
					    http://www.springframework.org/schema/mvc    
					    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
					    http://www.springframework.org/schema/task
						http://www.springframework.org/schema/task/spring-task-3.0.xsd">  
    
    <mvc:annotation-driven/>
    
    <mvc:default-servlet-handler/>
    
    <mvc:interceptors>  
    <!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 -->  
    	<mvc:interceptor>
    		<mvc:mapping path="/ssms/*"/>
    		<bean class="com.ssms.interceptor.CommonHandlerInterceptor"/>
    	</mvc:interceptor>
	</mvc:interceptors> 
	
    <!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->  
    <context:component-scan base-package="com.ssms.action">
		<context:include-filter type="regex" expression="com.ssms.action.*"/>
    </context:component-scan>     
    
    <!--开启这个配置，spring才能识别@Scheduled注解   -->  
    <task:annotation-driven scheduler="qbScheduler" mode="proxy"/> 
     
    <task:scheduler id="qbScheduler" pool-size="10"/>  
    
    <!--避免IE执行AJAX时，返回JSON出现下载文件 -->  
    <bean id="mappingJacksonHttpMessageConverter"  
        class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">  
        <property name="supportedMediaTypes">  
            <list>  
                <value>text/html;charset=UTF-8</value>  
            </list>  
        </property>  
    </bean>  
    
    <!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->  
    <bean  
        class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">  
        <property name="messageConverters">  
            <list>  
                <ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->  
            </list>  
        </property>  
    </bean>  
    
    <!-- 定义跳转的文件的前后缀 ，视图模式配置-->  
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->  
        <property name="prefix" value="/html/" />  
        <property name="suffix" value=".html" />  
    </bean>  
      
    <!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->  
    <bean id="multipartResolver"    
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">    
        <!-- 默认编码 -->  
        <property name="defaultEncoding" value="utf-8" />    
        <!-- 文件大小最大值 -->  
        <property name="maxUploadSize" value="10485760000" />    
        <!-- 内存中的最大值 -->  
        <property name="maxInMemorySize" value="40960" />    
    </bean>
    
    <bean id="springContextUtil" class="com.ssms.interceptor.SpringContextUtil"></bean>
    
    	<!-- 一个类里两个定时任务 配置你要定时加载的目标类 -->  
    <bean id="autoJob" class="com.ssms.timer.AutoJob" />  
  
    <!-- 定时任务1 -->  
    <bean id="autoJobDetail"   class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">  
        <!-- 指定任务类 -->  
        <property name="targetObject" ref="autoJob" />  
        <!-- 指定任务方法 -->  
        <property name="targetMethod" value="invoke" />  
        
        <property name="concurrent" value="false" />  
    </bean>  
    <!-- 定义时间间隔触发器 -->  
    <bean id="autoJobDetailCronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">  
        <property name="jobDetail">  
            <ref bean="autoJobDetail" />  
        </property>  
        <property name="cronExpression">  
            <value>* */1 * * * ?</value>  
        </property>  
    </bean>  
  
    <!-- 启动定时器 -->  
    <bean id="schedulerFactory" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" lazy-init="false">  
        <property name="triggers">  
            <list>  
                <ref local="autoJobDetailCronTrigger" />  
            </list>  
        </property>  
    </bean>  

</beans>  